
# Checkers

global side, halfSide, radius

# Hot seat: no arguments
# Minimax: blue/red
procedure main(argv)

  local board, color, game

  # Hot seat
  if 0 = *argv then {

    &window := open("Checkers","g","size=512,512")
    color := "green"

    # Global graphical variables
    side := 40
    halfSide := side / 2
    radius := 10

    every i := 1 to 8 do
      every j := 1 + (i % 2) to 8 by 2 do {

        # Draw squares
        Fg(color)
        FillRectangle((j-1) * side,(i-1) * side,side,side)

        # Draw pieces at starting positions
        if (1 <= i <= 3) then { drawCircle(i,j,"red") }
        else if (6 <= i <= 9) then { drawCircle(i,j,"blue") }

      }

    board := createBoard()

    play(board)

  # Minimax
  } else {

    game := CheckersGameState((argv[1]==("blue"|"red")) | "blue")

    while not game.finished() do {
      game.draw_board()
      if not (L := game.get_move()) then { stop("Goodbye") }
      if game.apply_move(L) then { game.advance_turn() }
    }

    write((game.finished() || " wins") | "Game over, result a draw?")

  }

end

# Hot seat gameplay
procedure play(board)

  local turn, input, L, r

  turn := "blue"

  while find("red",!!board) & find("blue",!!board) do {

    drawBoard(board)

    repeat {

      # Get player input
      write(turn,"'s turn, click on initial position")

      while Event() ~= &lrelease

      # Get initial square
      L := [&y/side+1,&x/side+1]

      # Invalid initial position
      if not find(turn,board[L[1],L[2]]) then {
        write("Requested move is illegal, try again.")
        next
      }

      write("Click on target position")

      while Event() ~= &lrelease

      put(L,&y/side+1)
      put(L,&x/side+1)

      # Check targets
      every i := 3 to *L by 2 do {

        # Target is not empty. Check next one
        if not isEmpty(board,L[i],L[i+1]) then
          next

        r := moveChecker(board,L,turn,i)

        if r == "bb" then
          break break
        else if r == "bn" then
          break next

      }

      break

    }

    turn := nextTurn(turn)

  }

end

procedure moveChecker(board,L,turn,i)

  local r

  r := if find("queen",board[L[1],L[2]]) then
    moveQueen(board,L,i)
  else
    moveRegular(board,L,turn,i)

  return r

end

procedure moveQueen(board,L,i)

  if abs(L[3]-L[1]) = abs(L[4]-L[2]) = 1 then {

    board[L[1],L[2]] :=: board[L[3],L[4]]
    return "bb"

  } else if abs(L[i] - L[i-2]) = abs(L[i+1]-L[i-1]) = 2 then {

    board[L[i],L[i+1]] :=: board[L[i-2],L[i-1]]
    board[(L[i]+L[i-2])/2, (L[i+1]+L[i-1])/2] := " "

  } else {

    write("Cant perform requested move.")
    return "bn"

  }

end

procedure moveRegular(board,L,turn,row)

  local direction

  direction := (if turn == "blue" then -1 else 1)

  # Move 1 column (left or right) and 1 row in valid direction
  if abs(L[2]-L[4]) = 1 & (L[3]-L[1]) = direction then {

    board[L[1],L[2]] :=: board[L[3],L[4]]
    animateMove([L[1],L[2]],[L[3],L[4]],turn)
    return "bb"

  # Move 2 columns and 2 rows in valid direction
  # Even entries are columns and odd entries are rows
  } else if (L[row]-L[row-2]) = direction*2 & abs(L[row+1]-L[row-1]) = 2 then {

    board[L[row],L[row+1]] :=: board[L[row-2],L[row-1]]
    board[(L[row]+L[row-2])/2, (L[row+1]+L[row-1])/2] := " "
    animateMove([L[row-2], L[row-1]], [L[row],L[row+1]],turn)
    return "next"

  } else {

    write("Cant perform requested move.")
    return "bn"

  }

end

procedure createBoard()

  local rows

  rows := list(8)

  every !rows := list(8," ")

  every row := 1 to 3 do
    every col := 1 + (row % 2) to 8 by 2 do
      rows[row,col] := "red"

  every row := 6 to 8 do
    every col := 1 + (row % 2) to 8 by 2 do
      rows[row,col] := "blue"

  return rows

end

procedure isEmpty(board,i,j)
  return board[i,j] == " "
end


procedure drawTopBoard()
  write("   \\ 1 2 3 4 5 6 7 8  column")
  write("row -----------------")
end


procedure drawBoard(rows)

  drawTopBoard()

  every i := 1 to 8 do {
    writes(" ",i,"  ")
    every j := 1 to 8 do writes("|",rows[i,j,1])
    write("|")
    write("    -----------------")
  }

end

procedure nextTurn(turn)
  return if turn == "red" then "blue" else "red"
end

procedure prepareAnimation(start, target, turn)

  speed := 22

  # Center of current square
  currentPos := calculateCirclePosition(start[1],start[2])

  # Center of target square
  targetPos := calculateCirclePosition(target[1],target[2])

  # Calculate final vector by scaling unit vector with speed
  vec := scaleVector(unitVector(subVectors(targetPos,currentPos)),speed)

  # Row/Col components
  modRow := if vec[1] < 0 then -1 else 1
  modCol := if vec[2] < 0 then -1 else 1

  row := start[1] ; col := start[2]
  whiteLines := [] ; middleLine := []

  limit := abs(start[1]-target[1]) + 1

  # Collect square positions along path
  # Redraw them at each step
  every i := 1 to limit do {
    put(middleLine,calculateSquarePosition(row,col))
    if i ~= limit then {
      put(whiteLines,calculateSquarePosition(row,col+modCol))
      put(whiteLines,calculateSquarePosition(row+modRow,col))
    }
    row +:= modRow ; col +:= modCol
  }

  checkCondition := if turn == "blue" then checkBlue else checkRed

  currentPos := addVectors(currentPos,vec)

  T := table()
  T["currentPos"] := currentPos
  T["targetPos"] := targetPos
  T["middleLine"] := middleLine
  T["whiteLines"] := whiteLines
  T["vector"] := vec
  T["checkCondition"] := checkCondition

  return T

end

procedure animateMove(start,target,turn)

  t := prepareAnimation(start,target,turn)

  # Run animation
  while t["checkCondition"](t["currentPos"],t["targetPos"]) do {

    # Draw green path
    Fg("green")
    every square := !t["middleLine"] do { FillRectangle(square[2],square[1],side,side) }

    WSync()

    # Draw white paths
    Fg("white")
    every square := !t["whiteLines"] do { FillRectangle(square[2],square[1],side,side) }

    # Draw pawn
    Fg(turn)
    FillCircle(t["currentPos"][2],t["currentPos"][1],radius)

    WSync()

    t["currentPos"] := addVectors(t["currentPos"],t["vector"])

    delay(50)

  }

  Fg("green")
  FillRectangle(t["targetPos"][2]-halfSide,t["targetPos"][1]-halfSide,side,side)
  Fg(turn)
  FillCircle(t["targetPos"][2],t["targetPos"][1],radius)

end

# Go up while current position is lower than target
procedure checkBlue(currentPos,targetPos)
  return currentPos[1] > targetPos[1]
end

# Go down while current position is higher than target
procedure checkRed(currentPos,targetPos)
  return currentPos[1] < targetPos[1]
end

procedure countPixels(rowOrCol)
  return (rowOrCol - 1) * side
end

procedure calculateSquarePosition(row,col)
  return [countPixels(row),countPixels(col)]
end

procedure calculateCirclePosition(row,col)
  return [countPixels(row) + halfSide,countPixels(col) + halfSide]
end

procedure subVectors(a,b)
  return [a[1]-b[1],a[2]-b[2]]
end

procedure addVectors(a,b)
  return [a[1]+b[1],a[2]+b[2]]
end

procedure scaleVector(v,s)
  return [v[1]*s,v[2]*s]
end

procedure unitVector(vector)
  magnitude := sqrt(vector[1]^2+vector[2]^2)
  return [vector[1]/magnitude,vector[2]/magnitude]
end

procedure drawCircle(i,j,color)

  local pos

  pos := calculateCirclePosition(i,j)

  Fg(color)
  FillCircle(pos[2],pos[1],radius)

end

class GameState(player,turn)

  # Assessment
  abstract method evaluate()

  # Check if position is terminal
  abstract method finished()

  # Generate all possible moves for current state
  abstract method generate_moves()

  # Create physical copy of game state
  abstract method copy()

  # Render game state visually
  abstract method draw_board()

  method minimax(depth,player)

    local alpha
    /player := turn

    # Evaluate at the bottom
    if (depth = 0) | finished() then {
      ev := evaluate()
      if ev === &null then {
        stop("evaluate() returned null for preceding board")
      } else {
        return ev
      }

    # Maximize player chances
    } else if player == turn then {
      every childmove := generate_moves(node) do {
        child := copy()
        child.apply_move(childmove)
        kidval := child.minimax(depth-1,player)
        if not (/alpha := kidval) then {
          alpha <:= kidval
        }
      }

    # Minimize player chances
    } else {
      every childmove := generate_moves(node) do {
        child := copy()
        child.apply_move(childmove)
        kidval := -child.minimax(depth-1,player)
        if not (/alpha := kidval) then {
          alpha >:= kidval
        }
      }
    }

    return \alpha | 0

  end

  method advance_turn()
    if turn == player[i := 1 to *player] then {
      i +:= 1
      if i > *player then { i := 1 }
      turn := player [i]
    } else {
      stop("No player named ",image(turn))
    }
  end

end

class CheckersGameState : GameState(square,mydepth,human)

  method apply_move(L)

    i := 0

    while i+4 <= *L do {

      # Swap positions
      srcrow := L[i+1]; srccol := L[i+2]
      destrow := L[i+3]; destcol := L[i+4]
      square[srcrow,srccol] :=: square[destrow, destcol]

      # Clear enemy position
      if abs(srcrow-destrow)=2 then {
        square[(srcrow+destrow)/2,(srccol+destcol)/2] := " "
      }

      i +:= 2

    }

    return

  end

  method evaluate()

    local dir
    if turn=="red" then dir := 1 else dir := -1
    points := 0

    # Go through all rows and cols
    every row := 1 to 8 do {
      every col := 1 to 8 do {

        # No points for empty square
        if square[row,col] == " " then {
          next

        # Add points for player
        } else if find(turn,square[row,col]) then {
          sgn := 1

        # Subtract points for opponent
        } else {
          sgn := -1
        }

        # Multiplier
        points +:= 1000 * sgn

        # Add points for friendly queen
        if find("queen", square[row,col]) then {
          points +:= 10000*sgn

        # Subtract normal pieces points
        # proportional to promotion distance
        } else {
          points -:= sgn * 2 ^ (if dir=-1 then row else (8-row))
        }
      }
    }

    return points

  end

  method generate_moves()

    # Positions of player pieces
    every row := 1 to 8 & col := 1 to 8 & match(turn,square[row,col]) do {

      if turn=="red" then dir := 1 else dir := -1

      # Regular move
      every square[row+dir,(c := ((col-1)|col+1))]== " " do {
        suspend [row,col,row+dir,c]
      }

      # Jump
      every (csgn := (1|-1)) &
            (square[row+dir*2, col+csgn*2]== " ") &
            enemy_in(row+dir,col+csgn) do {

        L := [row,col,row+dir*2, col+2*csgn]
        suspend L
        suspend generate_jumps(L)

      }

      # Queen move
      every (dir := (1|-1)) & (csgn := (1|-1)) do {

        if square[row+dir,col+csgn] == " " then {
          suspend [row,col,row+dir,col+csgn]
        }

        if square[row+dir*2,col+csgn*2] == " " &
           enemy_in(row+dir, col+csgn) then {

          L := [row,col,row+dir,col+csgn]
          suspend L
          suspend generate_jumps(L)

        }

      }

    }

  end

  method enemy_in(row,column)
    if (row|column) = 0 then {
      fail
    } else {
      s := square[row,column]
      return not (s == (" " | turn))
    }
  end

  method generate_jumps(L)

    local dir
    if turn=="red" then dir := 1 else dir := -1
    row := L[-2] ; col := L[-1]

    every (rsgn := (dir | (if find("queen",square[row,col]) then -dir))) &
          (csgn := (1|-1)) &
          (square[row+rsgn*2, col+2*csgn]==" ") &
          enemy_in(row+rsgn, col+csgn) do {

      L2 := L ||| [row+rsgn*2, col+2*csgn]
      suspend L2
      suspend generate_jumps(L2)

    }

  end

  method finished()
    if not find(player[1], !!square) then return player[2]
    if not find(player[2], !!square) then return player[1]
  end

  method draw_board()

    local i, j

    write("(draw board ",image(square),")")
    drawTopBoard()

    every i := 1 to 8 do {
      writes(" ",i,"  ")
      every j := 1 to 8 do {
        if find("queen", square[i,j]) then {
          writes("|",map(square[i,j,1],&lcase,&ucase))
        } else {
          writes("|",square[i,j,1])
        }
      }
      write("|\n    -----------------")
    }

  end

  method computermove()

    list_of_possible := []
    t1 := &time

    # Generate possible moves
    every possible := generate_moves() do {

      # Apply and rate move
      put(list_of_possible, possible)
      mv := copy()
      mv.apply_move(possible)
      thepoints := mv.minimax(mydepth)
      # mv.draw_board()

      if /bestpoints | thepoints>bestpoints then {

        bestpoints := thepoints
        list_of_possible := [possible]

      } else if thepoints=bestpoints then {
        put(list_of_possible, possible)
      }

    }

     if *list_of_possible = 0 then { stop("No possible moves") }

     # Choose random of best moves
     possible := ?list_of_possible
     t2 := &time

     # Go deeper if enough time left
     if t2-t1 < 1000 then {
       delay(1000-(t2-t1))
       mydepth +:= 1
     } else {
       mydepth -:= 1
     }

     # Return move
     return possible

  end

  method copy()
    cp := CheckersGameState(turn)
    every i := 1 to 8 do {
      every j := 1 to 8 do {
        cp.square[i][j] := square[i][j]
      }
    }
    return cp
  end

  method get_move()

    if (turn == human) then {

      # Validate initial position
      while {
        write("Player move(row1,col2,row2,col2...):")
        input := read() ; L := []
        input ? while put(L, integer(tab(many(&digits)))) do =","
        if not find(turn,square[L[1],L[2]]) then {
          write("Requested move is illegal, try again.")
          next
        }
        break
      }

      return L

    } else {
      return computermove()
    }

  end

  initially(p)
    mydepth := 1
    player := ["blue", "red"]
    human := p
    turn := "blue"
    square := createBoard()

end
