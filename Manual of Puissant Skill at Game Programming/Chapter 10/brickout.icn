
# Brickout

procedure main()

  # Create window
  &window := open("Brickout","g","size=640,480","fg=white","bg=black")

  ballSide := 10
  paddleWidth := 40
  paddleHeight := 10
  width := 640
  height := 480
  maxRightX := width - paddleWidth
  maxLives := 8

  # Ball position
  x := 320 ; y := 260

  # Ball vector
  dx := 0 ; dy := 1

  # Paddle position
  px := 320 ; py := 460

  # Score and Lives
  score := 0 ; lives := 0

  bricks := createBricks()

  Fg("white")

  # Paddle
  FillRectangle(px,py,paddleWidth,paddleHeight)

  # Ball
  FillRectangle(x,y,ballSide,ballSide)

  every (!!bricks).draw()

  repeat {

    # Erase ball
    EraseArea(x,y,ballSide,ballSide)

    # Update ball position
    x +:= dx ; y +:= dy

    # Draw ball
    FillRectangle(x,y,ballSide,ballSide)

    WSync()

    # Paddle bounce
    # Left or right ball side is in horizontal paddle range
    # and bottom ball side is in vertical paddle range
    if px <= (x | x + ballSide) <= (px + paddleWidth) &
       py <= (y + ballSide) <= (py + paddleHeight) then {

      dy *:= -1
      dx +:= ((x + 5) - (px + 20)) / 10

    }

    # Bounce left wall
    if x <= 0 then
      dx *:= -1

    # Bounce right wall
    if (x + ballSide) >= width then
      dx *:= -1

    # Bounce top wall
    if y <= 0 then
      dy *:= -1

    if (y + ballSide) > height then {

      dy := dy * -1
      lives +:= 1
      dx := 0

      if (lives = maxLives) then {

        WAttrib("label=Bricks [game over, q to quit] score: " || score)

        while *Pending() > 0 do Event()
        while Event() ~== "q"

        exit(0)

      } else {
        WAttrib("label=Bricks [" ||  lives || " / " || "4] score: " ||
        score)
      }

    }

    every b := !!bricks do {
      if b.hittest(x,y) then {
        score +:= b.score()
        b.erase()
        WAttrib("label=Bricks [" ||  lives || " / "||"4] score: "||score)
        dy *:= -1
      }
    }

    # Move paddle
    EraseArea(px,py,paddleWidth,paddleHeight)
    px := QueryPointer()
    if (px > maxRightX) then px := maxRightX
    FillRectangle(px,py,paddleWidth,paddleHeight)

    WSync()

    every 1 to 75000

  }

end

class Brick(x,y,color)

  method score()
    if color == "blue" then
      return 10
    else if color == "orange" then
      return 5
    else if color == "green" then
      return 1
  end

  method draw()
    Fg(color)
    FillRectangle(x,y,45,20)
  end

  method erase()
    color := "black"
    EraseArea(x,y,45,20)
  end

  method hittest(ballx,bally)
    return color ~== "black" &
           x - 10 < ballx < x + 45 &
           y - 10 < bally < y + 20
  end

end

procedure rowColor(row)
  if row = 0 then
    return "blue"
  else if 1 <= row <= 4 then
    return "yellow orange"
  else if row > 4 then
    return "green"
end

procedure createBricks()
  bricks := []
  every row := 0 to 7 do {
    color := rowColor(row)
    put(bricks,[])
    every column := 0 to 12 do {
      b := Brick(column * 49 + 2,row * 24 + 12,color)
      put(bricks[-1],b)
    }
  }
  return bricks
end
